//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.StudyManager;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers
{
    [Route("api/[controller]")]
    public class ExclusionController : Controller
    {
        private readonly IExclusionLogic _exclusionLogic;

        public ExclusionController(IExclusionLogic exclusionLogic)
        {
            _exclusionLogic = exclusionLogic;
        }

        /// <summary>
        /// Get all exclusion criteria from study id
        /// </summary>
        /// <param name="studyId"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("/study/{studyId}")]
        public async Task<IActionResult> GetAllForStudy(int studyId)
        {
            var getAll = await _exclusionLogic.GetAllForStudy(studyId);

            if (getAll == null)
            {
                return NotFound();
            }

            return Ok(getAll);
        }

        /// <summary>
        /// Get exclusion criteria by id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetExclusionById(int id)
        {
            var get = await _exclusionLogic.GetById(id);

            if (get == null)
            {
                return NotFound();
            }

            return Ok(get);
        }

        /// <summary>
        /// Create exclusion criteria
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPost]
        public async Task<IActionResult> CreateExclusion([FromBody]ExclusionCriterionDTO exclusion)
        {
            if (!ModelState.IsValid || exclusion.Id != 0)
            {
                return BadRequest(ModelState);
            }

            var create = await _exclusionLogic.Create(exclusion);
            exclusion.Id = create;

            return Ok(create);
            //return CreatedAtAction("GetExclusionById", new {create}, create);
        }

        /// <summary>
        /// Update exclusion criterion
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPut]
        public async Task<IActionResult> UpdateExclusion([FromBody]ExclusionCriterionDTO exclusion)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var update = await _exclusionLogic.Update(exclusion);

            if (update)
            {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Delete exclusion from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteExclusion(int id)
        {
            var delete = await _exclusionLogic.Delete(id);

            if (delete)
            {
                return NotFound();
            }

            return NotFound();
        }

    }
}

