//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.UserManager.Interfaces;
using BDSA.ReviewIt.Server.StorageLayer.ServerDTOs;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers
{
    [Route("api/[controller]")]
    public class StudyUserController : Controller
    {
        private readonly IUserLogic _userLogic;

        public StudyUserController(IUserLogic userLogic)
        {
            _userLogic = userLogic;
        }

        /// <summary>
        /// Get study user from id
        /// </summary>
        /// <param name="studyId"></param>
        /// <param name="userId"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("/{userId}/study/{studyId}")]
        public async Task<IActionResult> GetStudyUserById(int studyId, int userId)
        {
            var get = await _userLogic.GetUserFromStudy(studyId, userId);

            if (get != null)
            {
                return Ok(get);
            }

            return NotFound();
        }

        /// <summary>
        /// Add user to study
        /// </summary>
        /// <param name="studyUser"></param>
        /// <returns> IActionResult </returns>
        [HttpPost("/addtoStudy")]
        public async Task<IActionResult> AddstudyUser([FromBody]ParticipantDTO studyUser)
        {
            if (!ModelState.IsValid || studyUser.Id != 0)
            {
                return BadRequest(ModelState);
            }

            var create = await _userLogic.AddUserToStudy(studyUser);

            return Ok(create);
        }

        /// <summary>
        /// Delete user from study by study id and user id
        /// </summary>
        /// <param name="studyId"></param>
        /// <param name="userId"></param>
        /// <returns> IActionResult </returns>
        [HttpDelete("/{userId}/study/{studyId}")]
        public async Task<IActionResult> DeleteStudyUser(int studyId, int userId)
        {
            var delete = await _userLogic.RemoveUserFromStudy(studyId, userId);

            if (delete)
            {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Update user role
        /// </summary>
        /// <param name="participant"></param>
        /// <returns> IActionResult </returns>
        [HttpPut("/study/updateuser")]
        public async Task<IActionResult> UpdateUserRole([FromBody]ParticipantDTO participant)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var update = await _userLogic.UpdateUserRole(participant);

            if (update)
            {
                return NoContent();
            }

            return NotFound();
        }

    }
}

