//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.StudyManager;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers {
    [Route("api/[controller]")]
    public class PhaseController : Controller {
        private readonly IPhaseLogic _phaseLogic;

        public PhaseController(IPhaseLogic phaseLogic) {
            _phaseLogic = phaseLogic;
        }


        /// <summary>
        /// Get phase from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetPhaseById(int id) {
            var get = await _phaseLogic.GetById(id);

            if (get == null) {
                return NotFound();
            }

            return Ok(get);
        }

        /// <summary>
        /// Create phase
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPost]
        public async Task<IActionResult> CreatePhase([FromBody]PhaseDTO phase) {
            if (!ModelState.IsValid || phase.Id != 0) {
                return BadRequest(ModelState);
            }

            var create = await _phaseLogic.Create(phase);
            //phase.Id = create;

            return Ok();
            //return Ok(phase.Id);
            //return CreatedAtAction("GetPhaseById", new { id = phase.Id }, phase);
        }

        /// <summary>
        /// Update phase
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdatePhase([FromBody]PhaseDTO phase) {
            if (!ModelState.IsValid) {
                return BadRequest(ModelState);
            }

            var update = await _phaseLogic.Update(phase);

            if (update) {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Delete phase
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeletePhaseById(int id) {
            var delete = await _phaseLogic.Delete(id);

            if (delete) {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Start phase
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpGet("{id}/startphase")]
        public async Task<IActionResult> StartPhase(int id) {
            var start = await _phaseLogic.StartPhase(await _phaseLogic.GetById(id));

            if (start) {
                return NoContent();
            }

            return NotFound();
        }

    }
}

