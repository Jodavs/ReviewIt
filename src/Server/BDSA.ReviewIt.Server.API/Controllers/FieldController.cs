//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.StudyManager;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers {
    [Route("api/[controller]")]
    public class FieldController : Controller {
        private readonly IFieldLogic _fieldLogic;

        public FieldController(IFieldLogic fieldLogic) {
            _fieldLogic = fieldLogic;
        }

        /// <summary>
        /// Create field
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPost]
        public async Task<IActionResult> CreateField([FromBody]FieldDTO field) {
            if (!ModelState.IsValid || field.Id != 0) {
                return BadRequest(ModelState);
            }

            var create = await _fieldLogic.Create(field);
            field.Id = create;

            return Ok(create);
            //return CreatedAtAction("GetField", create);
            //return CreatedAtAction("GetField", new {create}, create);
        }

        /// <summary>
        /// Get field from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetField(int id) {
            var get = await _fieldLogic.GetById(id);

            if (get == null) {
                return NotFound();
            }

            return Ok(get);
        }

        /// <summary>
        /// Update field from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateField([FromBody]FieldDTO field, int id) {
            if (!ModelState.IsValid) {
                return BadRequest(ModelState);
            }

            var update = await _fieldLogic.Update(field, id);

            if (update) {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Delete field from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteField(int id) {
            var delete = await _fieldLogic.Delete(id);

            if (delete) {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Get all fields from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet("study/{id}")]
        public async Task<IActionResult> GetAllFields(int id) {
            var getAll = await _fieldLogic.GetAllForStudy(id);

            if (getAll == null) {
                return NotFound();
            }

            return Ok(getAll);
        }

    }
}

