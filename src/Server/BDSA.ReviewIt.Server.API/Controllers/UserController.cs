//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.UserManager.Interfaces;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers {
    [Route("api/[controller]")]
    public class UserController : Controller {
        private readonly IUserLogic _userLogic;

        public UserController(IUserLogic userLogic) {
            _userLogic = userLogic;
        }
        /// <summary>
        /// Get user from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetUserById(int id) {
            var get = await _userLogic.GetById(id);

            if (get == null) {
                return NotFound();
            }

            return Json(get);
        }

        /// <summary>
        /// Create user
        /// </summary>
        /// <param name="user"></param>
        /// <returns> IActionResult </returns>
        [HttpPost]
        public async Task<IActionResult> CreateUser([FromBody]UserDTO user) {
            if (!ModelState.IsValid || user.Id != 0) {
                return BadRequest(ModelState);
            }

            var create = await _userLogic.Create(user);

            return Ok(create);
        }

        /// <summary>
        /// Update user
        /// </summary>
        /// <param name="user"></param>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateUser([FromBody] UserDTO user, int id) {
            if (!ModelState.IsValid) {
                return BadRequest(ModelState);
            }
            var update = await _userLogic.Update(user, id);

            if (update) {
                return NoContent();
            }

            return NotFound();

        }

        /// <summary>
        /// Delete user from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(int id) {
            var delete = await _userLogic.Delete(id);

            if (delete) {
                return NoContent();
            }

            return NotFound();
        }

    }
}

