//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using BDSA.ReviewIt.Server.Logic.StudyManager;
using Microsoft.AspNetCore.Mvc;
using ServerDTOs.ServerDTOs;

namespace Server.Controllers {
    [Route("api/[controller]")]
    public class ClassificationController : Controller {
        private readonly IClassificationLogic _classification;

        public ClassificationController(IClassificationLogic classification) {
            _classification = classification;
        }

        /// <summary>
        /// Get classification by id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("{id}")]
        public async Task<IActionResult> GetClassificationId(int id) {
            var classification = await _classification.GetById(id);

            if (classification == null) {
                return NotFound();
            }

            return Ok(classification);
        }

        /// <summary>
        /// Create classification
        /// </summary>
        /// <returns> IActionResult </returns>
        [HttpPost]
        public async Task<IActionResult> Post([FromBody]ClassificationCriterionDTO classification) {
            if (!ModelState.IsValid) {
                return BadRequest(ModelState);
            }

            var id = await _classification.Create(classification);
            classification.Id = id;

            return Ok(id);
            // return CreatedAtAction("GetClassificationId", new {id}, classification);
        }

        /// <summary>
        /// Update classification by id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateClassification([FromBody]ClassificationCriterionDTO classification, int id) {
            if (!ModelState.IsValid) {
                return BadRequest(ModelState);
            }

            var update = await _classification.Update(classification, id);

            if (update) {
                return NoContent();
            }

            return NotFound();
        }

        /// <summary>
        /// Delete classification from id
        /// </summary>
        /// <param name="id"></param>
        /// <returns> IActionResult </returns>
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteClassification(int id) {
            var delete = await _classification.Delete(id);

            if (delete) {
                return NoContent();
            }

            return Ok(delete);
        }

        /// <summary>
        /// Get all classifications for the tasks from the respective study id
        /// </summary>
        /// <param name="studId"></param>
        /// <returns> IActionResult </returns>
        [HttpGet("/study/{studId}")]
        public async Task<IActionResult> GetAllClassificationsForStudyTask(int studId) {
            var getAll = await _classification.GetAllForStudy(studId);

            if (getAll == null) {
                return NotFound();
            }

            return Ok(getAll);
        }
    }
}

